{"version":3,"sources":["components/WasteSearchForm/icons8-search-60.png","components/WasteSearchForm/index.js","components/WasteCard/index.js","components/WasteCardList/index.js","components/FavouritesCardList/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","WasteSearchForm","_ref","onButtonSubmit","handleChange","react_default","a","createElement","className","type","onSubmit","htmlFor","placeholder","required","onChange","aria-label","src","magnifyingGlass","alt","WasteCard","handleClick","event","target","classList","contains","_this","props","addFav","title","body","removeFav","_this$props","this","buttonClassName","isFavourited","onClick","index_es","icon","faStar","dangerouslySetInnerHTML","__html","Parser","Component","WasteCardList","favourites","wasteItems","map","item","i","components_WasteCard","key","some","eachFavourite","FavouritesCardList","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","searchQuery","preventDefault","fetch","then","response","json","setState","filter","keywords","toLowerCase","includes","state","keyword","catch","error","console","log","value","wasteItem","toConsumableArray","push","role","components_WasteSearchForm","components_WasteCardList","length","components_FavouritesCardList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5471087f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icons8-search-60.8367de1a.png\";","import React from 'react';\nimport './WasteSearchForm.css';\nimport magnifyingGlass from './icons8-search-60.png';\n\nconst WasteSearchForm = ({onButtonSubmit, handleChange}) => {\n  return (\n    <form className=\"form\" type=\"submit\" onSubmit={onButtonSubmit}>\n      <label htmlFor=\"search\" className=\"visuallyhidden\">\n        Search: \n      </label>\n      <input\n        type=\"text\"\n        placeholder=\"Enter a keyword\"\n        required\n        onChange={handleChange}\n      />\n      <button className=\"grow shadow-5\" aria-label=\"searchbutton\">\n        <img src={magnifyingGlass} alt=\"magnifyingGlass\" />\n      </button>\n    </form>\n  );\n};\n\nexport default WasteSearchForm;\n","import React, {Component} from 'react';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faStar} from '@fortawesome/free-solid-svg-icons';\nimport './WasteCard.css';\nimport Parser from 'html-react-parser';\n\nclass WasteCard extends Component {\n\n  handleClick = (event) => {\n    (event.target.classList.contains('starButton--default'))\n      ? this.props.addFav({\n        title: this.props.title,\n        body: this.props.body,\n      })\n      : this.props.removeFav({\n        title: this.props.title,\n        body: this.props.body,\n      });\n  };\n\n  render() {\n    const {title, body, isFavourited} = this.props;\n    const buttonClassName = isFavourited ? 'starButton--favourite' : 'starButton--default';\n    return (\n      <div>\n        <div className=\"wasteCardDetails\">\n          <button\n            className={buttonClassName}\n            onClick={this.handleClick}\n          >\n            <FontAwesomeIcon\n              className=\"faStar\"\n              icon={faStar}\n              onClick={this.handleClick}\n            />\n          </button>\n          <p>{title}</p>\n          <div className=\"wasteBody\" dangerouslySetInnerHTML={{__html: Parser(body)}} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default WasteCard;\n","import React from 'react';\nimport WasteCard from '../WasteCard';\n\nconst WasteCardList = ({favourites, wasteItems, addFav, removeFav}) => {\n  return (\n    <div>\n      {wasteItems.map((item, i) => (\n        <WasteCard\n          key={i}\n          title={item.title}\n          body={item.body}\n          addFav={addFav}\n          removeFav={removeFav}\n          isFavourited={favourites.some((eachFavourite) => eachFavourite.title === item.title)}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default WasteCardList;\n","import React from 'react';\nimport WasteCard from '../WasteCard';\nimport './FavouritesCardList.css';\n\n\nconst FavouritesCardList = ({favourites, removeFav, addFav}) => {\n  return (\n    <div className=\"favouritesCardList\">\n      <h1 className=\"favouritesHeading pl4\">Favourites</h1>\n      {favourites.map((item, i) => (\n        <WasteCard\n          key={i}\n          title={item.title}\n          body={item.body}\n          addFav={addFav}\n          removeFav={removeFav}\n          isFavourited\n        />\n      ))}\n    </div>\n\n  );\n};\n\nexport default FavouritesCardList;\n","import React, {Component} from 'react';\nimport WasteSearchForm from './components/WasteSearchForm';\nimport WasteCardList from './components/WasteCardList';\nimport FavouritesCardList from './components/FavouritesCardList';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      keyword: '',\n      favourites: [],\n      wasteItems: [],\n    };\n  }\n\n  onButtonSubmit = (searchQuery) => {\n    searchQuery.preventDefault();\n    fetch('https://secure.toronto.ca/cc_sr_v1/data/swm_waste_wizard_APR?limit=1000')\n      .then((response) => response.json())\n      .then((json) => {\n        this.setState({wasteItems: json.filter((item) => item.keywords.toLowerCase().includes(this.state.keyword.toLowerCase()))});\n      })\n      .catch((error) => {\n        console.log('Error fetching and parsing data', error);\n      });\n  };\n\n  handleChange = (event) => {\n    this.setState({keyword: event.target.value});\n    if (!event.target.value) {\n      this.setState({wasteItems: []});\n    }\n  };\n\n  addFav = (wasteItem) => {\n    const favourites = [...this.state.favourites];\n    favourites.push(wasteItem);\n    this.setState({favourites});\n  };\n\n  removeFav = (wasteItem) => {\n    const favourites = this.state.favourites.filter((eachFavourite) => eachFavourite.title !== wasteItem.title);\n    this.setState({favourites});\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"appHeader\" role=\"banner\">\n          <p className=\"headerTitle\">Toronto Waste Lookup</p>\n        </header>\n        <WasteSearchForm\n          onButtonSubmit={this.onButtonSubmit}\n          handleChange={this.handleChange}\n        />\n        <WasteCardList\n          wasteItems={this.state.wasteItems}\n          addFav={this.addFav}\n          removeFav={this.removeFav}\n          favourites={this.state.favourites}\n        />\n        <div className=\"favouritesSection\">\n          {this.state.favourites.length > 0\n            ? (\n              <FavouritesCardList\n                wasteItems={this.state.wasteItems}\n                removeFav={this.removeFav}\n                favourites={this.state.favourites}\n              />\n            ) : (\n              <div className=\"emptyFavourites pl4 pb3\">\n                <h1 className=\"favouritesHeading\">Favourites</h1>\n                <h2>No favorites to show</h2>\n                <p>Search for waste items and add them to your favorites.</p>\n              </div>\n            )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}